/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

// 以下内容为简化函数定义
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;

// 以下内容为自定义函数
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WeeklyReview
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  daysAgo: 7
};
var WeeklyReview = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    // 添加命令，插入回顾列表
    this.addCommand({
      id: "Insert Weekly Review",
      name: "Insert Weekly Review Links",
      editorCallback: (editor, view) => {
        this.insertWeeklyReviewLinks(editor);
      }
    });
    // 添加命令，创建回顾文件
    this.addCommand({
      id: "Start Review",
      name: "Start Weekly Review",
      callback: () => {
        this.createWeeklyReviewFile();
      }
    });
    this.addSettingTab(new WeeklyReviewSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async insertWeeklyReviewLinks(editor) {
    // 检索出近7日新创建的文件,将这些文件的双链格式化为 Markdown 列表
    const files = this.app.vault.getMarkdownFiles();
    let start = moment().subtract(this.settings.daysAgo, "days").startOf("day");
    let recentFiles = files.filter((f) => moment(f.stat.ctime).isAfter(start)).sort((a, b) => b.stat.ctime - a.stat.ctime);
    const reviewContent = recentFiles.map((f) => `- [[${f.basename}]]`).join("\n");
    // 插入内容
    // 获取光标位置
    const cursor = editor.getCursor();
    // 插入内容
    editor.replaceRange(reviewContent, cursor);
  }
  async createWeeklyReviewFile() {
    // 检索出近7日新创建的文件,将这些文件的双链格式化为 Markdown 列表
    const files = this.app.vault.getMarkdownFiles();
    let start = moment().subtract(this.settings.daysAgo, "days").startOf("day");
    let recentFiles = files.filter((f) => moment(f.stat.ctime).isAfter(start)).sort((a, b) => b.stat.ctime - a.stat.ctime);
    const reviewContent = recentFiles.map((f) => `- [[${f.basename}]]`).join("\n");
    // 创建新文件并插入内容
    const reviewFilename = `Weekly Review - ${moment().format("YYYY-MM-DD")}.md`;
    await this.app.vault.create(reviewFilename, reviewContent);
    new import_obsidian.Notice(`Weekly review file created with links to ${recentFiles.length} files.`);
    app.workspace.openLinkText(reviewFilename, "", false, { active: true });
  }
};

// 以下内容为设置页面
var WeeklyReviewSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Weekly Review" });
    new import_obsidian.Setting(containerEl).setName("How many days to show?").setDesc("Set the number of days for the review period (default is 7)").addText((text) => text.setPlaceholder("Days").setValue(this.plugin.settings.daysAgo.toString()).onChange(async (value) => {
      let num = parseInt(value);
      if (!isNaN(num) && num > 0) {
        this.plugin.settings.daysAgo = num;
        await this.plugin.saveSettings();
      } else {
        new import_obsidian.Notice("Please enter a valid number of days.");
      }
    }));
  }
};

